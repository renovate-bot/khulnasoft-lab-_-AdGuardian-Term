var searchIndex = new Map(JSON.parse('[\
["adguardian",{"doc":"","t":"CHHCCCCCCCFFNNNNNNOHONNNNOONNNNNNOFFFNNNNNNOOOONNNOHNNNNNNOOOOONNNNNNNNNOFFOOONNNNNNNNONNHOOHNNNNNNOOOOOOOONNOOONNNNNNFNNNNNOOOHNNONOOOONNNNOHFFNNNNHHNNNNHHNNOOHHHNNNNNNHHCCCCCCHHHHHHHHHHHHHHHHHHHH","n":["fetch","main","run","ui","welcome","widgets","fetch_filters","fetch_query_log","fetch_stats","fetch_status","AdGuardFilteringStatus","Filter","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","enabled","fetch_adguard_filter_list","filters","from","from","into","into","name","rules_count","try_from","try_from","try_into","try_into","type_id","type_id","url","Query","QueryResponse","Question","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached","class","client","data","deserialize","deserialize","deserialize","elapsed_ms","fetch_adguard_query_log","from","from","from","into","into","into","name","question","question_type","reason","time","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upstream","DomainData","StatsResponse","avg_processing_time","blocked_filtering","blocked_filtering_chart","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","deserialize","deserialize","deserialize_domains","dns_queries","dns_queries_chart","fetch_adguard_stats","fmt","fmt","from","from","into","into","name","num_blocked_filtering","num_dns_queries","num_replaced_parental","num_replaced_safebrowsing","num_replaced_safesearch","replaced_parental","replaced_safebrowsing","to_owned","to_owned","top_blocked_domains","top_clients","top_queried_domains","try_from","try_from","try_into","try_into","type_id","type_id","StatusResponse","borrow","borrow_mut","clone","clone_into","deserialize","dhcp_available","dns_addresses","dns_port","fetch_adguard_status","fmt","from","http_port","into","language","protection_disabled_duration","protection_enabled","running","to_owned","try_from","try_into","type_id","version","draw_ui","Crate","CratesIoResponse","borrow","borrow","borrow_mut","borrow_mut","check_for_updates","check_version","deserialize","deserialize","from","from","get_env","get_latest_version","into","into","krate","max_version","print_ascii_art","print_error","print_info","try_from","try_from","try_into","try_into","type_id","type_id","verify_connection","welcome","chart","filters","gauge","list","status","table","convert_to_chart_data","find_bounds","generate_x_labels","generate_y_labels","interpolate","make_history_chart","make_history_datasets","prepare_chart_data","make_filters_list","truncate","make_gauge","make_list","truncate","render_status_paragraph","block_status_text","make_query_table","make_request_cell","make_row_color","make_time_taken_and_color","time_ago"],"q":[[0,"adguardian"],[6,"adguardian::fetch"],[10,"adguardian::fetch::fetch_filters"],[34,"adguardian::fetch::fetch_query_log"],[73,"adguardian::fetch::fetch_stats"],[118,"adguardian::fetch::fetch_status"],[141,"adguardian::ui"],[142,"adguardian::welcome"],[171,"adguardian::widgets"],[177,"adguardian::widgets::chart"],[185,"adguardian::widgets::filters"],[187,"adguardian::widgets::gauge"],[188,"adguardian::widgets::list"],[190,"adguardian::widgets::status"],[191,"adguardian::widgets::table"],[197,"anyhow"],[198,"core::result"],[199,"serde::de"],[200,"reqwest::async_impl::client"],[201,"reqwest::error"],[202,"core::any"],[203,"anyhow"],[204,"core::fmt"],[205,"core::fmt"],[206,"tokio::sync::notify"],[207,"alloc::sync"],[208,"core::option"],[209,"alloc::string"],[210,"std::env"],[211,"core::error"],[212,"alloc::boxed"],[213,"ratatui::text"],[214,"ratatui::widgets::chart"],[215,"ratatui::widgets::chart"],[216,"ratatui::widgets::gauge"],[217,"ratatui::style"],[218,"ratatui::widgets::paragraph"],[219,"ratatui::widgets::table"]],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize a list of domains from the JSON data","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Represents the status response from the AdGuard Home API.","","","","","","","","","Fetches the current status from the AdGuard Home instance.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Checks for updates to the crate, and prints a message if …","Given a possibly undefined version number, check if it’s …","","","Returns the argument unchanged.","Returns the argument unchanged.","Given a key, get the value from the environmental …","Gets the latest version of the crate from crates.io","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Prints the AdGuardian ASCII art to console","Print error message, along with (optional) stack trace, …","Reusable function that just prints success messages to the …","","","","","","","With the users specified AdGuard details, verify the …","Initiate the welcome script This function will:","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,3,6,3,6,3,6,6,0,3,3,6,3,6,6,6,3,6,3,6,3,6,6,0,0,0,11,12,13,11,12,13,12,13,12,11,11,12,13,12,0,11,12,13,11,12,13,13,12,13,12,12,11,12,13,11,12,13,11,12,13,12,0,0,16,16,16,15,16,15,16,15,16,15,16,15,15,16,0,16,16,0,15,16,15,16,15,16,15,16,16,16,16,16,16,16,15,16,16,16,16,15,16,15,16,15,16,0,20,20,20,20,20,20,20,20,0,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,25,26,25,26,0,0,25,26,25,26,0,0,25,26,25,26,0,0,0,25,26,25,26,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"`{{}b}{{}{{d{b}}}}`````````{ce{}{}}000{c{{h{f}}}j}{c{{h{l}}}j}`{{nA`A`A`}{{h{fAb}}}}`{cc{}}044``{c{{h{e}}}{}{}}000{cAd{}}0````666666````{c{{h{Af}}}j}{c{{h{Ah}}}j}{c{{h{Aj}}}j}`{{nA`A`A`}{{h{AfAl}}}}666:::`````555555444``````::::{AnAn}{B`B`}{{ce}b{}{}}0`{c{{h{An}}}j}{c{{h{B`}}}j}{c{{h{{Bb{An}}}}}j}``{{nA`A`A`}{{h{B`Al}}}}{{AnBd}Bf}{{B`Bd}Bf}??{ce{}{}}0````````00```????>>`00{BhBh}8{c{{h{Bh}}}j}```{{nA`A`A`}{{h{BhAl}}}}{{BhBd}Bf}{cc{}}`5````5{c{{h{e}}}{}{}}0{cAd{}}`{{{Bj{{Bb{Ah}}}}{Bj{B`}}{Bj{Bh}}f{Bn{Bl}}}{{h{bAl}}}}``8888{{}b}{{{C`{A`}}}b}{c{{h{Cb}}}j}{c{{h{Cd}}}j}77{A`{{h{CfCh}}}}{A`{{h{Cf{Cl{Cj}}}}}}>>``5{{A`A`{C`{Ab}}}b}{{A`Cn}b}::::99{{nCfCfCfCfCf}{{h{b{Cl{Cj}}}}}}{{}{{h{b{Cl{Cj}}}}}}``````{{{Bb{D`}}}{{Bb{{Db{D`D`}}}}}}{B`{{Db{D`D`}}}}{{DdDd}{{Bb{Df}}}}{{DdDh}{{Bb{Df}}}}{{{Bb{D`}}Dh}{{Bb{D`}}}}{B`Dj}{B`{{Bb{Dl}}}}{B`b}{{{Dn{l}}E`}Eb}{{A`Dh}Cf}{B`Ed}{{A`{Dn{An}}EfE`}Eb}2{{BhB`}Eh}{{A`Cn}{{Db{CfEf}}}}{{{Dn{Ah}}E`}Ej}{Aj{{h{CfAl}}}}{A`Ef}{A`{{h{{Db{CfEf}}Al}}}}{A`{{h{CfAl}}}}","c":[],"p":[[1,"unit"],[8,"Result",197],[5,"AdGuardFilteringStatus",10],[6,"Result",198],[10,"Deserializer",199],[5,"Filter",10],[5,"Client",200],[1,"str"],[5,"Error",201],[5,"TypeId",202],[5,"QueryResponse",34],[5,"Query",34],[5,"Question",34],[5,"Error",197],[5,"DomainData",73],[5,"StatsResponse",73],[5,"Vec",203],[5,"Formatter",204],[8,"Result",204],[5,"StatusResponse",118],[5,"Receiver",205],[5,"Notify",206],[5,"Arc",207],[6,"Option",208],[5,"CratesIoResponse",142],[5,"Crate",142],[5,"String",209],[6,"VarError",210],[10,"Error",211],[5,"Box",212],[1,"bool"],[1,"f64"],[1,"tuple"],[1,"i32"],[5,"Span",213],[1,"usize"],[5,"Chart",214],[5,"Dataset",214],[1,"slice"],[1,"u16"],[5,"List",215],[5,"Gauge",216],[6,"Color",217],[5,"Paragraph",218],[5,"Table",219]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
